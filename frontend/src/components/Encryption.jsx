import React, { useState } from 'react';
import { ApiService } from '../services/api';

function Encryption({ currentKey, addLog, addPerformanceData, addHistory }) {
  const [message, setMessage] = useState('Hello ATBM NEU!');
  const [encryptLoading, setEncryptLoading] = useState(false);
  const [decryptLoading, setDecryptLoading] = useState(false);
  const [ciphertext, setCiphertext] = useState(null);
  const [decryptedText, setDecryptedText] = useState(null);

  const handleEncrypt = async () => {
    if (!currentKey) {
      addLog('Vui l√≤ng sinh kh√≥a tr∆∞·ªõc', 'error');
      return;
    }
    
    setEncryptLoading(true);
    const startTime = performance.now();
    
    try {
      addLog('ƒêang m√£ h√≥a v·ªõi RSA-OAEP...', 'info');
      const result = await ApiService.encrypt(currentKey.key_id, message);
      
      const endTime = performance.now();
      const duration = ((endTime - startTime) / 1000).toFixed(3);
      
      if (result.success) {
        setCiphertext(result.ciphertext_blocks);
        addLog(`M√£ h√≥a th√†nh c√¥ng! ${result.block_count} block ƒë∆∞·ª£c t·∫°o`, 'success');
        addLog(`Th·ªùi gian: ${duration}s`, 'success');
        
        if (addPerformanceData) {
          addPerformanceData('Encrypt', duration, currentKey.key_id);
        }
        
        // Add to history
        if (addHistory) {
          addHistory({
            type: 'encrypt',
            keyId: currentKey.key_id,
            message: message,
            duration: parseFloat(duration),
            blockCount: result.block_count
          });
        }
      } else {
        addLog('L·ªói m√£ h√≥a: ' + result.error, 'error');
      }
    } catch (error) {
      addLog('L·ªói API m√£ h√≥a: ' + error.message, 'error');
    } finally {
      setEncryptLoading(false);
    }
  };

  const handleDecrypt = async () => {
    if (!currentKey) {
      addLog('Vui l√≤ng sinh kh√≥a tr∆∞·ªõc', 'error');
      return;
    }
    
    if (!ciphertext) {
      addLog('Ch∆∞a c√≥ ciphertext ƒë·ªÉ gi·∫£i m√£', 'error');
      return;
    }
    
    setDecryptLoading(true);
    const startTime = performance.now();
    
    try {
      addLog('ƒêang gi·∫£i m√£ v·ªõi RSA-CRT...', 'info');
      const result = await ApiService.decrypt(currentKey.key_id, ciphertext);
      
      const endTime = performance.now();
      const duration = ((endTime - startTime) / 1000).toFixed(3);
      
      if (result.success) {
        setDecryptedText(result.plaintext);
        addLog('Gi·∫£i m√£ th√†nh c√¥ng!', 'success');
        addLog(`Th·ªùi gian: ${duration}s`, 'success');
        
        if (addPerformanceData) {
          addPerformanceData('Decrypt', duration, currentKey.key_id);
        }
        
        // Add to history
        if (addHistory) {
          addHistory({
            type: 'decrypt',
            keyId: currentKey.key_id,
            message: result.plaintext,
            duration: parseFloat(duration)
          });
        }
      } else {
        addLog('L·ªói gi·∫£i m√£: ' + result.error, 'error');
      }
    } catch (error) {
      addLog('L·ªói API gi·∫£i m√£: ' + error.message, 'error');
    } finally {
      setDecryptLoading(false);
    }
  };

  return (
    <div className="card">
      <h2>üîí 2. M√£ h√≥a / Gi·∫£i m√£ (RSA-OAEP)</h2>
      <div className="card-content">
        <div className="form-group">
          <label>Th√¥ng ƒëi·ªáp c·∫ßn m√£ h√≥a</label>
          <textarea
            value={message}
            onChange={(e) => setMessage(e.target.value)}
            placeholder="Nh·∫≠p th√¥ng ƒëi·ªáp..."
          />
        </div>

        <div className="button-group">
          <button 
            className="btn btn-primary" 
            onClick={handleEncrypt}
            disabled={encryptLoading || !currentKey}
          >
            {encryptLoading && <span className="loading"></span>}
            üîí M√£ h√≥a
          </button>
          
          <button 
            className="btn btn-secondary" 
            onClick={handleDecrypt}
            disabled={decryptLoading || !currentKey || !ciphertext}
          >
            {decryptLoading && <span className="loading"></span>}
            üîì Gi·∫£i m√£
          </button>
        </div>

        {ciphertext && (
          <div className="result-box">
            <strong>Ciphertext (first 3 blocks):</strong>
            <pre>{JSON.stringify(ciphertext.slice(0, 3), null, 2)}</pre>
            <div style={{ fontSize: '0.8rem', color: '#666', marginTop: '8px' }}>
              T·ªïng c·ªông: {ciphertext.length} blocks
            </div>
          </div>
        )}

        {decryptedText && (
          <div className="result-box success">
            <strong>Plaintext ƒë√£ gi·∫£i m√£:</strong>
            <div style={{ marginTop: '8px', fontSize: '1.1rem', color: '#333' }}>
              {decryptedText}
            </div>
          </div>
        )}
      </div>
    </div>
  );
}

export default Encryption;
