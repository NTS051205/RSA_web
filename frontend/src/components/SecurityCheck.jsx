/* eslint-env es2015 */
import React, { useState, useEffect } from 'react';

function SecurityCheck({ currentKey }) {
  const [securityAnalysis, setSecurityAnalysis] = useState(null);

  useEffect(() => {
    const analyzeSecurity = () => {
    if (!currentKey) {
      return;
    }

    const bitLength = currentKey.public_key.bit_length;
    const analysis = {
      bitLength,
      level: '',
      recommendations: [],
      warnings: [],
      score: 0,
      levelColor: '',
      levelIcon: ''
    };

    // Analyze based on bit length
    if (bitLength < 256) {
      analysis.level = 'üî¥ KH√îNG AN TO√ÄN';
      analysis.levelColor = '#f44336';
      analysis.levelIcon = 'üö®';
      analysis.score = 10;
      analysis.warnings.push('Key size qu√° nh·ªè! D·ªÖ b·ªã factor attack.');
      analysis.recommendations.push('N√™n s·ª≠ d·ª•ng key ‚â• 1024 bits cho m·ª•c ƒë√≠ch h·ªçc thu·∫≠t');
      analysis.recommendations.push('S·ª≠ d·ª•ng key ‚â• 2048 bits cho production');
    } else if (bitLength < 512) {
      analysis.level = 'üü° Y·∫æU';
      analysis.levelColor = '#ff9800';
      analysis.levelIcon = '‚ö†Ô∏è';
      analysis.score = 30;
      analysis.warnings.push('Key size nh·ªè, ch·ªâ ph√π h·ª£p cho m·ª•c ƒë√≠ch demo');
      analysis.recommendations.push('ƒê·ªÉ an to√†n, n√™n d√πng key ‚â• 1024 bits');
    } else if (bitLength < 1024) {
      analysis.level = 'üü† TRUNG B√åNH';
      analysis.levelColor = '#ff9800';
      analysis.levelIcon = '‚ö°';
      analysis.score = 50;
      analysis.warnings.push('Key size c√≥ th·ªÉ b·ªã factor n·∫øu attacker c√≥ ƒë·ªß t√†i nguy√™n');
      analysis.recommendations.push('N√™n n√¢ng c·∫•p l√™n ‚â• 1024 bits cho b·∫£o m·∫≠t t·ªët h∆°n');
      analysis.recommendations.push('S·ª≠ d·ª•ng key 2048 bits cho production');
    } else if (bitLength < 2048) {
      analysis.level = 'üü¢ KH√Å T·ªêT';
      analysis.levelColor = '#4caf50';
      analysis.levelIcon = '‚úÖ';
      analysis.score = 75;
      analysis.recommendations.push('Key size t·ªët cho m·ª•c ƒë√≠ch h·ªçc thu·∫≠t v√† demo');
      analysis.recommendations.push('Cho production, n√™n d√πng ‚â• 2048 bits');
    } else if (bitLength < 4096) {
      analysis.level = 'üü¢ T·ªêT';
      analysis.levelColor = '#4caf50';
      analysis.levelIcon = '‚úÖ';
      analysis.score = 90;
      analysis.recommendations.push('Key size an to√†n cho production');
      analysis.recommendations.push('ƒê√°p ·ª©ng c√°c ti√™u chu·∫©n b·∫£o m·∫≠t hi·ªán t·∫°i');
    } else {
      analysis.level = 'üü¢ R·∫§T T·ªêT';
      analysis.levelColor = '#4caf50';
      analysis.levelIcon = 'üõ°Ô∏è';
      analysis.score = 100;
      analysis.recommendations.push('Key size r·∫•t an to√†n');
      analysis.recommendations.push('Ph√π h·ª£p cho c√°c ·ª©ng d·ª•ng b·∫£o m·∫≠t cao');
    }

    // Check if p and q are close (security concern)
    // eslint-disable-next-line no-undef
    const p = BigInt(currentKey.private_key.p);
    // eslint-disable-next-line no-undef
    const q = BigInt(currentKey.private_key.q);
    const diff = p > q ? p - q : q - p;
    // eslint-disable-next-line no-undef
    const avg = (p + q) / BigInt(2);
    // eslint-disable-next-line no-undef
    const percentDiff = Number(diff * BigInt(100) / avg);

    if (percentDiff < 5 && bitLength < 1024) {
      analysis.warnings.push('Prime p v√† q qu√° g·∫ßn nhau, d·ªÖ b·ªã factor b·∫±ng ph∆∞∆°ng ph√°p Fermat');
    }

    // Check if e is standard
    // eslint-disable-next-line no-undef
    const e = BigInt(currentKey.public_key.e);
    // eslint-disable-next-line no-undef
    if (e !== BigInt(65537) && e !== BigInt(3)) {
      // eslint-disable-next-line no-undef
      analysis.warnings.push('Public exponent e kh√¥ng ph·∫£i gi√° tr·ªã chu·∫©n (65537 ho·∫∑c 3)');
    }

      setSecurityAnalysis(analysis);
    };

    if (currentKey) {
      analyzeSecurity();
    }
  }, [currentKey]);

  if (!currentKey) {
    return null;
  }

  if (!securityAnalysis) {
    return (
      <div className="card">
        <h2>üîí Ph√¢n t√≠ch An to√†n</h2>
        <div className="card-content">
          <p>Ch∆∞a c√≥ key ƒë·ªÉ ph√¢n t√≠ch.</p>
        </div>
      </div>
    );
  }

  return (
    <div className="card">
      <h2>üîí Ph√¢n t√≠ch An to√†n RSA</h2>
      <div className="card-content">
        {/* Security Level Badge */}
        <div style={{
          background: `linear-gradient(135deg, ${securityAnalysis.levelColor} 0%, ${securityAnalysis.levelColor}dd 100%)`,
          padding: '24px',
          borderRadius: '16px',
          textAlign: 'center',
          marginBottom: '24px',
          boxShadow: '0 8px 24px rgba(0,0,0,0.15)',
          border: '2px solid rgba(255,255,255,0.3)'
        }}>
          <div style={{ fontSize: '3rem', marginBottom: '12px' }}>
            {securityAnalysis.levelIcon}
          </div>
          <div style={{ 
            fontSize: '1.8rem', 
            fontWeight: 700, 
            color: 'white',
            marginBottom: '8px'
          }}>
            {securityAnalysis.level}
          </div>
          <div style={{ 
            fontSize: '0.9rem', 
            color: 'rgba(255,255,255,0.95)',
            fontWeight: 600
          }}>
            ƒê·ªô an to√†n: {securityAnalysis.score}/100
          </div>
        </div>

        {/* Score Bar */}
        <div style={{ marginBottom: '24px' }}>
          <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '8px' }}>
            <span style={{ fontWeight: 600, color: '#4a5568' }}>Ch·ªâ s·ªë An to√†n</span>
            <span style={{ fontWeight: 700, color: securityAnalysis.levelColor }}>
              {securityAnalysis.score}/100
            </span>
          </div>
          <div style={{
            height: '12px',
            background: '#e2e8f0',
            borderRadius: '10px',
            overflow: 'hidden'
          }}>
            <div style={{
              width: `${securityAnalysis.score}%`,
              height: '100%',
              background: `linear-gradient(90deg, ${securityAnalysis.levelColor}, ${securityAnalysis.levelColor}dd)`,
              transition: 'width 0.5s ease',
              boxShadow: '0 2px 8px rgba(0,0,0,0.2)'
            }} />
          </div>
        </div>

        {/* Key Info */}
        <div style={{
          background: 'linear-gradient(135deg, #f7fafc 0%, #edf2f7 100%)',
          padding: '16px',
          borderRadius: '12px',
          marginBottom: '20px'
        }}>
          <div style={{ fontWeight: 600, marginBottom: '12px', color: '#2d3748' }}>
            üìã Th√¥ng tin Key
          </div>
          <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '12px', fontSize: '0.9rem' }}>
            <div>
              <span style={{ color: '#718096' }}>Bit Length:</span>
              <span style={{ marginLeft: '8px', fontWeight: 700, color: securityAnalysis.levelColor }}>
                {securityAnalysis.bitLength} bits
              </span>
            </div>
            <div>
              <span style={{ color: '#718096' }}>ƒê·ªô ph·ª©c t·∫°p:</span>
              <span style={{ marginLeft: '8px', fontFamily: 'monospace' }}>
                2^{Math.ceil(securityAnalysis.bitLength * 0.693)} operations
              </span>
            </div>
          </div>
        </div>

        {/* Warnings */}
        {securityAnalysis.warnings.length > 0 && (
          <div style={{
            background: 'linear-gradient(135deg, #fff3cd 0%, #fff8e1 100%)',
            borderLeft: '4px solid #ff9800',
            padding: '16px',
            borderRadius: '12px',
            marginBottom: '20px'
          }}>
            <div style={{ fontWeight: 700, marginBottom: '12px', color: '#f57c00' }}>
              ‚ö†Ô∏è C·∫£nh b√°o An to√†n
            </div>
            {securityAnalysis.warnings.map((warning, idx) => (
              <div key={idx} style={{ 
                marginBottom: '8px', 
                fontSize: '0.9rem',
                color: '#e65100'
              }}>
                ‚Ä¢ {warning}
              </div>
            ))}
          </div>
        )}

        {/* Recommendations */}
        <div style={{
          background: 'linear-gradient(135deg, #e8f5e9 0%, #f1f8f4 100%)',
          borderLeft: '4px solid #4caf50',
          padding: '16px',
          borderRadius: '12px'
        }}>
          <div style={{ fontWeight: 700, marginBottom: '12px', color: '#2e7d32' }}>
            üí° Khuy·∫øn ngh·ªã
          </div>
          {securityAnalysis.recommendations.map((rec, idx) => (
            <div key={idx} style={{ 
              marginBottom: '8px', 
              fontSize: '0.9rem',
              color: '#1b5e20'
            }}>
              ‚úì {rec}
            </div>
          ))}
        </div>

        {/* Security Facts */}
        <div style={{
          marginTop: '20px',
          padding: '16px',
          background: '#f8f9fa',
          borderRadius: '12px'
        }}>
          <div style={{ fontWeight: 600, marginBottom: '12px', color: '#2d3748' }}>
            üìö Th√¥ng tin B·∫£o m·∫≠t
          </div>
          <div style={{ fontSize: '0.85rem', lineHeight: '1.8', color: '#4a5568' }}>
            <div>‚Ä¢ RSA-1024: C√≥ th·ªÉ b·ªã crack b·ªüi quantum computer trong t∆∞∆°ng lai</div>
            <div>‚Ä¢ RSA-2048: Khuy·∫øn ngh·ªã cho production (b·∫£o m·∫≠t t·ªõi 2030)</div>
            <div>‚Ä¢ RSA-4096: Khuy·∫øn ngh·ªã cho d·ªØ li·ªáu nh·∫°y c·∫£m cao</div>
            <div>‚Ä¢ Public exponent e=65537 l√† ti√™u chu·∫©n an to√†n</div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default SecurityCheck;

