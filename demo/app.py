# app.py - Streamlit UI ti·∫øng Vi·ªát cho RSA Demo
import streamlit as st
from rsa_core import *
import json, base64, io

st.set_page_config(
    page_title="RSA Demo (ATBM) ‚Äì Python",
    page_icon="üîê",
    layout="wide"
)

# ====== STYLE ======
st.markdown("""
<style>
:root { --radius: 16px; }
.block { background: #111827; padding: 16px 18px; border-radius: var(--radius); border: 1px solid #1f2937; }
h1,h2,h3 { margin-bottom: .4rem; }
.small { color: #9ca3af; font-size: 13px; }
.metric { font-weight: 600; font-size: 28px; }
hr { border: none; height: 1px; background: #1f2937; margin: 12px 0; }
</style>
""", unsafe_allow_html=True)

st.title("üîê RSA Demo ‚Äì An to√†n & B·∫£o m·∫≠t th√¥ng tin (Python)")
st.caption("Demo h·ªçc thu·∫≠t: key nh·ªè, OAEP/PSS m√¥ ph·ªèng. Kh√¥ng d√πng s·∫£n xu·∫•t.")

# ====== SIDEBAR ======
st.sidebar.header("C·∫•u h√¨nh / T√°c v·ª•")
p_low = int(st.sidebar.text_input("Gi·ªõi h·∫°n d∆∞·ªõi p,q", "100000000000000000000000000000000000000000000000000"))
p_high = int(st.sidebar.text_input("Gi·ªõi h·∫°n tr√™n p,q", "200000000000000000000000000000000000000000000000000"))

gen = st.sidebar.button("üîÅ Sinh kh√≥a m·ªõi")
load_default = st.sidebar.button("üìÇ T·∫£i kh√≥a t·ª´ file (rsa_keys.txt)")

if "K" not in st.session_state:
    st.session_state.K = None
if "ct" not in st.session_state:
    st.session_state.ct = []
if "sig" not in st.session_state:
    st.session_state.sig = 0
if "salt" not in st.session_state:
    st.session_state.salt = b""

col1, col2 = st.columns([1,1])

with col1:
    st.subheader("1) Sinh / N·∫°p kh√≥a")
    box = st.container()
    with box:
        if gen:
            with st.spinner("ƒêang sinh kh√≥a..."):
                K = generate_rsa(int(p_low), int(p_high))
                st.session_state.K = K
                st.success("ƒê√£ sinh kh√≥a (demo).")
        elif load_default:
            try:
                K = load_keys("rsa_keys.txt")
                st.session_state.K = K
                st.success("ƒê√£ n·∫°p kh√≥a t·ª´ rsa_keys.txt")
            except Exception as e:
                st.error(f"L·ªói n·∫°p kh√≥a: {e}")

        K = st.session_state.K
        if K:
            c1, c2, c3, c4 = st.columns(4)
            c1.metric("bitlen(n)", K.n.bit_length())
            c2.metric("e", K.e)
            c3.metric("p (demo)", K.p)
            c4.metric("q (demo)", K.q)
            st.caption("Kh√≥a demo: n nh·ªè ƒë·ªÉ minh h·ªça t·∫•n c√¥ng ph√¢n t√≠ch th·ª´a s·ªë.")
            st.download_button("T·∫£i kh√≥a (rsa_keys.txt)", data=(
                f"# RSA demo keys\nn={K.n}\ne={K.e}\nd={K.d}\np={K.p}\nq={K.q}\n"
            ), file_name="rsa_keys.txt", mime="text/plain")

with col2:
    st.subheader("2) M√£ h√≥a / Gi·∫£i m√£ (OAEP + CRT)")
    msg = st.text_area("Th√¥ng ƒëi·ªáp c·∫ßn m√£ h√≥a", "Hello ATBM NEU!")
    colE, colD = st.columns(2)
    with colE:
        if st.button("üîí M√£ h√≥a (OAEP)"):
            if st.session_state.K is None:
                st.warning("H√£y sinh ho·∫∑c n·∫°p kh√≥a tr∆∞·ªõc.")
            else:
                try:
                    ct_blocks = rsa_encrypt_bytes(msg.encode('utf-8'), st.session_state.K)
                    st.session_state.ct = ct_blocks
                    st.success(f"ƒê√£ m√£ h√≥a {len(ct_blocks)} block.")
                except Exception as e:
                    st.error(f"L·ªói m√£ h√≥a: {e}")
        if st.session_state.ct:
            st.code(str(st.session_state.ct[:12]) + (" ..." if len(st.session_state.ct)>12 else ""))
            st.download_button("T·∫£i ciphertext (cipher.txt)", data=" ".join(map(str, st.session_state.ct)), file_name="cipher.txt")
    with colD:
        if st.button("üîì Gi·∫£i m√£ (CRT)"):
            if st.session_state.K is None:
                st.warning("Ch∆∞a c√≥ kh√≥a.")
            elif not st.session_state.ct:
                st.warning("Ch∆∞a c√≥ ciphertext.")
            else:
                try:
                    pt = rsa_decrypt_bytes(st.session_state.ct, st.session_state.K).decode('utf-8', errors='replace')
                    st.text_area("Plaintext gi·∫£i m√£", pt, height=120)
                    st.success("OK")
                except Exception as e:
                    st.error(f"L·ªói gi·∫£i m√£: {e}")

st.subheader("3) K√Ω s·ªë / Ki·ªÉm tra (PSS-like)")
colS, colV = st.columns(2)
with colS:
    sign_msg = st.text_area("Chu·ªói c·∫ßn k√Ω", "ƒê√¢y l√† ch·ªØ k√Ω demo PSS-like.")
    if st.button("‚úçÔ∏è K√Ω s·ªë (PSS-like)"):
        if st.session_state.K is None:
            st.warning("Ch∆∞a c√≥ kh√≥a.")
        else:
            sig, salt = pss_sign(sign_msg.encode('utf-8'), st.session_state.K)
            st.session_state.sig = sig
            st.session_state.salt = salt
            st.success("ƒê√£ k√Ω.")
            st.code(str(sig)[:200] + ("..." if len(str(sig))>200 else ""))
            st.download_button("T·∫£i signature (signature.txt)",
                               data=(len(sig.to_bytes((sig.bit_length()+7)//8 or 1,'big')).to_bytes(2,'big')+
                                     sig.to_bytes((sig.bit_length()+7)//8 or 1,'big')+
                                     salt),
                               file_name="signature.txt")

with colV:
    verify_msg = st.text_input("Nh·∫≠p l·∫°i chu·ªói ƒë·ªÉ verify", "ƒê√¢y l√† ch·ªØ k√Ω demo PSS-like.")
    if st.button("üß™ Verify"):
        if st.session_state.K is None or st.session_state.sig == 0:
            st.warning("Thi·∫øu kh√≥a ho·∫∑c ch·ªØ k√Ω.")
        else:
            ok = pss_verify(verify_msg.encode('utf-8'), st.session_state.sig, st.session_state.salt, st.session_state.K)
            if ok:
                st.success("H·ª¢P L·ªÜ ‚úÖ")
            else:
                st.error("KH√îNG H·ª¢P L·ªÜ ‚ùå")

st.subheader("4) Demo t·∫•n c√¥ng: ph√¢n t√≠ch n nh·ªè (factor)")
if st.button("üîç Th·ª≠ factor n (trial + Pollard Rho)"):
    if st.session_state.K is None:
        st.warning("Ch∆∞a c√≥ kh√≥a.")
    else:
        try:
            method, f, secs = factor_demo(st.session_state.K.n)
            if f:
                st.error(f"ƒê√É T√åM TH·∫§Y TH·ª™A S·ªê ({method}) trong {secs:.3f}s: {f}")
                st.write(f"Th·ª´a s·ªë c√≤n l·∫°i: {st.session_state.K.n // f}")
            else:
                st.info(f"Ch∆∞a factor ƒë∆∞·ª£c trong th·ªùi gian demo (~{secs:.3f}s).")
        except Exception as e:
            st.error(f"L·ªói khi ch·∫°y factor demo: {e}")

st.subheader("5) Ghi ch√∫ an to√†n & khuy·∫øn ngh·ªã")
st.markdown("""
- ƒê√¢y l√† **b·∫£n demo h·ªçc thu·∫≠t**: modulus nh·ªè (kho·∫£ng 60 bit) ƒë·ªÉ minh h·ªça factor ‚áí **kh√¥ng an to√†n th·ª±c t·∫ø**.
- ƒê√£ m√¥ ph·ªèng **OAEP** cho m√£ h√≥a (ch·ªëng t·∫•n c√¥ng b·∫£n r√µ ƒë√£ bi·∫øt / chosen-cipher), **PSS-like** cho ch·ªØ k√Ω.
- Th·ª±c t·∫ø: d√πng RSA-2048/3072+, OAEP & PSS **chu·∫©n** t·ª´ th∆∞ vi·ªán `cryptography`/`pycryptodome`.
- L∆∞u √Ω RNG: d√πng `secrets` thay v√¨ random.
""")
